import Head from 'next/head'
import Image from 'next/image'
import { useEffect, useState } from 'react'
import styles from '../../styles/Home.module.css'
import { LineChart, XAxis, Tooltip, CartesianGrid, Line, YAxis } from 'recharts'
import { LineCharts } from '../../components/charts/LineCharts'

const getDateAndTimeAsString = (date) => {
  const d = new Date(date)
  return `${d.getDate()}/${d.getMonth() + 1} ${d.getHours()}:${d.getMinutes()}`
}

export default function UserProfile({ devices }) {
  const [ready, setReady] = useState(false)
  // console.log(a)
  // console.log(requests)

  // console.log(requests)
  useEffect(() => {
    setReady(true)
  }, [])
    
  return (
    <div className={styles.container}>
      <Head>
        <title>Stats</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        {/* <h1 className={styles.title}>
          Stats
        </h1> */}

        {ready && devices.map((device) => {
          const lastRequest = device.requests[device.requests.length - 1]
          return (
            <>
              <div>
                <p>Last Seen: {getDateAndTimeAsString(lastRequest.created)}</p>
                <p color="#9510AA">Inside Temperature: {lastRequest.decoded_payload.TempC_SHT}°C</p>
                <p>Humidity: {lastRequest.decoded_payload.Hum_SHT}%</p>
                <p>Temperature: {lastRequest.decoded_payload.TempC_DS}°C</p>
              </div>
            <LineCharts  key={device.id} requests={device.requests} device={device} />
            </>
          )
        })}
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}

export const getServerSideProps = async (context) => {
    const { params } = context
    const { username } = params
    console.log(username)
    const res = await fetch(process.env.NEXT_PUBLIC_SERVER + '/request/user/' + username, {
        method: 'GET',
        headers: {
            'Content-Type': 'application/json'
        }
    })

    const data = await res.json()
    const requests = data.requests.sort((a, b) => new Date(a.created) - new Date(b.created))

    const devicesRes = await fetch(process.env.NEXT_PUBLIC_SERVER + '/devices/user/' + username, {
      method: 'GET',
      headers: {
          'Content-Type': 'application/json'
      }
    })

  
  const devicesData = await devicesRes.json()

    const devices = {}
    devicesData.data.forEach((device) => {
      devices[device.id] = {...device, requests: []}
    })
    requests.forEach((request) => {
      if (!devices[request.device_id]) {
        devices[request.device_id] = {
          id: request.device_id,
          requests: []
        }
      }
      devices[request.device_id].requests.push(request)
    })

    console.log(devices)
    
    return {
        props: {
          requests,
          devices: Object.values(devices),
        }
    }
}