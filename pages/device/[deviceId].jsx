import Head from 'next/head'
import Image from 'next/image'
import { useEffect, useState } from 'react'
import styles from '../../styles/Home.module.css'
import { LineChart, XAxis, YAxis, Tooltip, CartesianGrid, Line } from 'recharts'

function LineCharts({ requests, device }) {
  return (
    <div>
      <LineChart
        width={600}
        height={200}
        data={requests}
        margin={{ top: 5, right: 20, left: 10, bottom: 5 }}
      >
        {/* <XAxis dataKey="created" /> */}
        <YAxis type="number" />
        <Tooltip />
        {/* <CartesianGrid strokeDasharray="3 3" /> */}
        <Line dot={false} type="monotone" dataKey="TempC_DS" stroke="#387908"  />
        <Line dot={false} type="monotone" dataKey="TempC_SHT" stroke="#9510AA" />
      </LineChart>

      <LineChart
        width={600}
        height={100}
        data={requests}
        margin={{ top: 5, right: 20, left: 10, bottom: 5 }}
      >
        <YAxis scale="auto" yAxisId={0} />
        <XAxis scale="auto" dataKey="created" />
        <Tooltip />
        {/* <CartesianGrid stroke="#f5f5f5" /> */}
        <Line dot={false} type="monotone" dataKey="Hum_SHT" stroke="#ff7300" yAxisId={0} />
      </LineChart>
    </div>
  )
}

export default function UserProfile({ requests, device }) {
  const [ready, setReady] = useState(false)

  const requestData = requests.sort((a, b) => new Date(a.created) - new Date(b.created))
  for (let i = 0; i < requestData.length; i++) {  
    requestData[i] = {
        ...requestData[i],
        ...requestData[i].decoded_payload,
        created: new Date(requestData[i].created).toLocaleString()
    }
    if(requestData[i].TempC_DS > 100) {
        console.log(i)
        console.log(requestData[i])
    }
  }
  const lastRequest = requestData[requestData.length - 1]
  const getDateAndTimeAsString = (date) => {
    const d = new Date(date)
    return `${d.getDate()}/${d.getMonth() + 1} ${d.getHours()}:${d.getMinutes()}`
}
  console.log(device)
  useEffect(() => {
    setReady(true)
  }, [])
    
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          {device.name}
        </h1>
        <p style={{color: "#f0f0f0"}}>Last seen: {getDateAndTimeAsString(lastRequest.created)}</p>
        <table>
            <tbody>
                <tr style={{color: "#9510AA"}}>
                    <td>Inside: </td>
                    <td>{lastRequest.TempC_SHT}</td>
                </tr>
                <tr style={{color: "#387908"}}>
                    <td>Outside: </td>
                    <td>{lastRequest.TempC_DS}</td>
                </tr>
                <tr style={{color: "#ff7300"}}>
                    <td>Humidity inside</td>
                    <td>{lastRequest.Hum_SHT}</td>
                </tr>
            </tbody>
        </table>
        {ready && <LineCharts requests={requestData} device={device} />}
        
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}

export const getServerSideProps = async (context) => {
    const { params } = context
    const { deviceId } = params
    console.log(deviceId)
    const res = await fetch(process.env.NEXT_PUBLIC_SERVER +'/request/device/' + deviceId, {
        method: 'GET',
        headers: {
            'Content-Type': 'application/json'
        }
    })
    const data = await res.json()

    const resDevice = await fetch(process.env.NEXT_PUBLIC_SERVER + '/device/' + deviceId + "?order=asc", {
        method: 'GET',
        headers: {
            'Content-Type': 'application/json'
        }
    })
    const device = await resDevice.json()

    const requests = data.requests
    return {
        props: {
          requests,
          device: device.data
        }
    }
}
